function compute90(age,alp,ggt,hbeag,hepatic_encephalopathy,na,pta,tbil)
{
					 
	//输入的参数
	var input = [[age],
	  			 [alp],
				 [ggt],
				 [hbeag],
				 [hepatic_encephalopathy],
				 [na],
				 [pta],
				 [tbil]];
	
	//标准化-均值
	var bjh_avg = [[43.7376],
				   [137.426],
				   [105.177],
				   [0.671756],
				   [0.231678],
				   [135.533],
				   [28.5766],
				   [318.327]];
	
	//计算标准化-去均值
	var bjh_q_avg = new Array();
	var size = input.length;
	for(var i=0;i<size;i++){
		if(input[i]==""||input[i]==null){
			bjh_q_avg[i] = 0;
		}else{
			bjh_q_avg[i] = parseFloat(input[i])-bjh_avg[i];
		}
	}
	
	//标准化-标准卡
	var bjh_bjk = [[11.3899],
				   [59.104],
				   [76.998],
				   [0.470173],
				   [0.422404],
				   [4.69004],
				   [10.2034],
				   [149.344]];
	
	//标准化_去方差
	var bjh_q_fc = new Array();
	for(var j=0;j<size;j++){
		bjh_q_fc[j] = bjh_q_avg[j]/bjh_bjk[j];
	}
		
	//激活函数
	var LogisticSigmoid = new Array();
	for(var k=0;k<size;k++){
		LogisticSigmoid[k] = 1/(1+math.exp(-bjh_q_fc[k]));
	}
	LogisticSigmoid[size] = 1;
	
	//输入层->隐藏层1
	var Weight_Biases = [
		[-1.70756,-1.02225,0.217975,0.729744,0.170087,-1.35304,0.581294,1.37442,0.123907],
		[-0.931291,0.842058,-0.789692,-0.272289,-0.016693,0.314124,-0.425673,-1.38939,0.420547],
		[-1.43644,0.568999,-0.139878,0.224272,-1.11966,-0.384364,-0.440454,-2.34737,1.17826],
		[0.716444,0.358398,0.303018,0.627489,0.228465,-0.0650859,0.000349457,1.82706,0.181126],
		[-0.348126,1.20619,-1.30723,0.400546,-1.32283,-1.23215,-0.925696,-0.0729297,0.398655],
		[-0.81282,0.895303,-1.11317,0.56131,-0.774807,0.394849,0.173526,0.52495,0.0818165],
		[-1.12833,-0.195116,2.19088,-0.137558,0.0790045,-0.495009,1.03561,0.00940463,0.020086],
		[0.654449,-1.4555,0.108362,-0.393421,1.86323,0.975812,-1.12609,1.70261,-2.23422],
		[-0.396826,-1.35934,-0.104415,0.801311,0.608399,1.09526,0.373653,0.610682,0.6045],
		[-0.412468,-0.855398,0.458666,0.330303,0.981942,-1.40402,-0.894571,1.45885,-0.897418],
		[1.19318,-1.82187,-0.267734,0.803171,1.40687,0.622295,0.0118596,0.201791,-0.81312],
		[0.179767,-0.931053,-1.10153,0.430447,0.10784,-0.136336,0.495566,0.502456,0.0256512],
		[-1.64357,0.180377,-2.28899,-0.59528,0.985037,-0.172704,0.348741,-1.54994,-1.17299],
		[2.07217,1.54871,-1.53714,0.488063,0.897083,0.172683,0.786567,-0.100037,0.0739666],
		[1.70875,-0.260576,-1.47053,0.711283,1.21383,-0.558242,0.402703,-1.46873,-1.01531],
		[1.47434,0.791238,1.43497,1.00686,0.282588,1.49062,0.000891037,0.752633,1.78902],
		[0,0,0,0,0,0,0,0,1]
    ];
	
	//输入层->输出
	var result = math.multiply(Weight_Biases,LogisticSigmoid);
	
	//激活函数->隐藏层1输入
    var LogisticSigmoid2 = new Array();
    for(var l=0;l<result.length-1;l++){
     	LogisticSigmoid2[l] = 1/(1+math.exp(-result[l]));
    }
    /*最后一个数值没有应用函数*/
    LogisticSigmoid2[result.length-1]=1;
	
	//隐藏层1→隐藏层2
    var Weight_Biases2 = [
        [0.914949,-0.442783,0.252954,0.867938,0.775861,0.508763,0.47948,-0.231421,0.857679,-0.942058,-0.424377,0.303516,0.870395,0.0833106,0.152359,0.982645,0.822857],
        [-1.44205,-0.00665033,-0.33184,-0.630262,1.56313,1.12639,0.625131,-0.262971,-0.04307,-0.945541,-0.875471,-0.463752,1.13786,-1.81693,-0.911167,-0.245079,0.116543],
        [-0.99818,0.161163,-0.762562,0.22231,0.903077,0.124076,-0.242606,-0.164903,0.599729,0.125333,-0.984924,-0.307864,-0.0874152,-0.187846,1.04892,0.919473,-0.0356886],
        [-0.499934,-0.632635,1.47677,1.07062,-0.89092,0.993457,-0.117457,2.06177,-0.815358,1.091,0.391345,-1.24699,-2.19574,0.378181,-1.72026,-1.45128,0.449354],
        [-1.60635,-0.694613,-2.17504,-0.371926,0.183999,0.097663,0.361337,-1.00783,0.912013,0.643147,-0.908463,0.945293,1.26572,-1.20139,0.967593,1.42074,0.288224],
        [0.0964375,1.37806,0.285374,-0.351812,0.268557,-0.359398,-1.96846,1.25342,-1.01267,0.553922,0.577449,0.46988,-0.659075,1.92099,-1.00761,-0.886537,-0.461991],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
	];
	
	//隐藏层1输出
	var result2 = math.multiply(Weight_Biases2,LogisticSigmoid2);
	
	//激活函数→隐藏层2-输入
    var LogisticSigmoid3 = new Array();
    for(var m=0;m<result2.length-1;m++){
       	LogisticSigmoid3[m] = 1/(1+math.exp(-result2[m]));
    }
    /*最后一个数值没有应用函数*/
    LogisticSigmoid3[result2.length-1]=1;
	
	//隐藏层2→输出层
    var Weight_Biases3 = [
    	[0.281689,1.86542,0.778769,-3.12774,2.18452,-2.0219,-0.801893],
        [0.303293,-2.882,-1.26406,2.46121,-3.01704,2.84262,-0.319131],
        [0,0,0,0,0,0,1]
    ];
	
	//隐藏层1输出
	var result3 = math.multiply(Weight_Biases3,LogisticSigmoid3);
	
	//转阴概率
    var zyin_percent = math.exp(result3[0])/(math.exp(result3[0])+math.exp(result3[1]));
    //转阳概率
    var zyang_percent = math.exp(result3[1])/(math.exp(result3[0])+math.exp(result3[1]));
        
	return zyang_percent;
	
}